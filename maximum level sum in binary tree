/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>>ans=new LinkedList<>();
      int m=Integer.MIN_VALUE;
      int k =0;
    public int maxLevelSum(TreeNode root) {
        List<Integer>l2=new ArrayList<>();
         List<Integer>l1=new ArrayList<>();
        levelOrder(root);
        for(int i=0;i<ans.size();i++){
            l2 = ans.get(i);
            int s=0;
            for(int j=0;j<l2.size();j++)
               s = s+l2.get(j);
            l1.add(s);
        }
        for(int k=0;k<l1.size();k++)
            if(l1.get(k) == Collections.max(l1))
                 return k+1;
        return 0;

        
    }
    public List<List<Integer>> levelOrder(TreeNode root) {

        
        if(root==null){
            return ans;
        }
        
        Queue<TreeNode>n=new LinkedList<>();
        n.add(root);
        while(!n.isEmpty()){
            List<Integer>l=new ArrayList<>();
            int count=n.size();
            for(int i=0;i<count;i++){
                TreeNode cur=n.poll();
                l.add(cur.val);
                if(cur.left!=null){
                    n.add(cur.left);
                }
                if(cur.right!=null){
                    n.add(cur.right);
                }
                
            }
            
            ans.add(l);
        }
        return ans;
    }
}
